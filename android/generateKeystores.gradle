// Define the keystore names
def keystoreNames = [
        "flavor_devDebug.jks",
        "flavor_devRelease.jks",
        "flavor_testDebug.jks",
        "flavor_testRelease.jks",
        "flavor_stagingDebug.jks",
        "flavor_stagingRelease.jks",
        "flavor_prodDebug.jks",
        "flavor_prodRelease.jks"
]

def keystoreDirName = "keystore"

// Register the task to generate keystores
task generateKeystores {
    group = "Keystore Management"
    description = "Generates keystores and writes to local.properties and credentials.txt"

    doFirst {
        // Create keystore directory if it doesn't exist
        def keystoreDir = new File(projectDir, keystoreDirName)
        if (!keystoreDir.exists()) {
            keystoreDir.mkdirs()
        }

        // Path to local.properties
        def localPropertiesFile = new File(projectDir, "local.properties")

        // Initialize localProperties as an empty StringBuilder
        def localProperties = new StringBuilder()

        // Create a StringBuilder for credentials
        def credentials = new StringBuilder()

        // Parameterized DName attributes
        def fullName = "Md. Mahfuzur Rahman"
        def organizationalUnit = "SBU Europe"
        def organizationName = "Brain Station 23"
        def localityName = "Mohakhali"
        def stateName = "Dhaka"
        def countryCode = "BD"

        // Combine to form the complete DName string
        def dname = "CN=$fullName, OU=$organizationalUnit, O=$organizationName, L=$localityName, ST=$stateName, C=$countryCode"

        // Iterate through keystore names to generate each one
        keystoreNames.each { keystoreName ->
            def alias = keystoreName.split("\\.")[0]
            def keystorePass = generatePassword()

            // Generate the keystore and get the SHA-1 fingerprint
            def sha1Fingerprint = generateKeystore(keystoreName, alias, keystorePass, dname, keystoreDir)

            // Append keystore info to localProperties
            localProperties.append(
                    """
                # $alias keystore settings
                ${alias}.storeFile=${keystoreDirName}/${keystoreName}
                ${alias}.storePassword=$keystorePass
                ${alias}.keyAlias=$alias
                ${alias}.keyPassword=$keystorePass
                ${alias}.sha1=$sha1Fingerprint
                """.stripIndent()
            )

            // Append credentials to the credentials StringBuilder with clear labeling
            credentials.append(
                    """
                Keystore Name: ${keystoreName}
                Alias: $alias
                Store Password: $keystorePass
                Key Password: $keystorePass
                SHA-1 Fingerprint: $sha1Fingerprint
                Distinguished Name (DName):
                Full Name: $fullName
                Organizational Unit: $organizationalUnit
                Organization: $organizationName
                City/Locality: $localityName
                State/Province: $stateName
                Country Code: $countryCode
                """.stripIndent()
            )
        }

        // Append to local.properties file if it exists, otherwise create a new one
        if (localPropertiesFile.exists()) {
            // Append new properties to the existing file
            localPropertiesFile.append(localProperties.toString())
            println("Appended keystore information to existing local.properties")
        } else {
            // Write the new properties file
            localPropertiesFile.write(localProperties.toString())
            println("Keystore information saved to new local.properties")
        }

        // Create credentials.txt file and write the keystore information
        def credentialsFile = new File(keystoreDir, "credentials.txt")
        credentialsFile.write(credentials.toString())
        println("Keystore credentials saved to ${credentialsFile.absolutePath}")
    }
}

// Ensure task is always up-to-date to avoid conflicts
generateKeystores.outputs.upToDateWhen { false }

// Function to generate a random password
def generatePassword() {
    return UUID.randomUUID().toString()
    // You can customize this method to create stronger passwords
}

// Function to generate the keystore and return SHA-1 fingerprint
def generateKeystore(String keystoreName, String alias, String keystorePass, String dname, File keystoreDir) {
    // Use keytool to generate the keystore
    def command = [
            "keytool", "-genkeypair",
            "-v", "-keystore", "${keystoreDir}/${keystoreName}",
            "-keyalg", "RSA", "-keysize", "2048", "-validity", "10000",
            "-alias", alias,
            "-storepass", keystorePass,
            "-keypass", keystorePass,
            "-dname", dname,
            "-storetype", "PKCS12"
    ]

    println("Executing command: ${command.join(' ')}") // Print the command for debugging

    def process = command.execute()

    // Wait for the process to complete and capture output
    process.waitFor()
    if (process.exitValue() != 0) {
        throw new GradleException("Failed to generate keystore: ${process.err.text.trim()}")
    }

    // Get SHA-1 fingerprint
    def fingerprintCommand = [
            "keytool", "-list", "-v",
            "-keystore", "${keystoreDir}/${keystoreName}",
            "-storepass", keystorePass,
            "-alias", alias
    ]

    println("Executing fingerprint command: ${fingerprintCommand.join(' ')}")
    // Print the fingerprint command for debugging

    def fingerprintProcess = fingerprintCommand.execute()
    fingerprintProcess.waitFor()
    if (fingerprintProcess.exitValue() != 0) {
        throw new GradleException("Failed to get SHA-1 fingerprint: ${fingerprintProcess.err.text.trim()}")
    }

    def output = fingerprintProcess.text
    def sha1Line = output.split('\n').find { it.contains('SHA1:') }
    def sha1Fingerprint = sha1Line?.split(': ')[1]?.trim()

    return sha1Fingerprint
}